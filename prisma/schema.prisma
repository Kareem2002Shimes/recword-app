generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String           @id @default(cuid())
    name          String?
    email         String           @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    firstName     String?
    lastName      String?
    password      String?
    active        Boolean          @default(false)
    createdAt     DateTime         @default(now())
    updatedAt     DateTime?        @updatedAt
    role          UserRole         @default(USER)
    words         Word[]
    likes         Like[]
    tracks        Track[]
    otp           OtpVerification?
}

model Word {
    id        String    @id @default(uuid())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    userId    String    @unique
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    likes   Like[]
    Track   Track? @relation(fields: [trackId], references: [id])
    trackId String @unique

    @@index([userId])
    @@index([trackId])
}

model Track {
    id        String    @id @default(uuid())
    name      String    @unique
    image     String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String    @unique
    words     Word[]

    @@index([userId])
}

model Like {
    userId String
    wordId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    word   Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)

    @@id([userId, wordId])
    @@index([userId])
    @@index([wordId])
}

model OtpVerification {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    expiresAt Int?     @db.Int
    otp       String
    userId    String   @unique
}

enum UserRole {
    USER
    ADMIN
}
